{"version":3,"sources":["components/Wrapper.js","components/TodoItem.js","components/TodoList.js","components/AddTodoList.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","_ref","children","Object","core_browser_esm","css","_templateObject","buttonStyled","TodoItem_templateObject","TodoItem","state","done","remove","onBtnDoneClickHandler","e","preventDefault","_this","setState","toggleDoneState","data","this","props","_templateObject2","_templateObject3","title","_templateObject4","id","_templateObject5","onClick","_templateObject6","Component","TodoList","TodoList_templateObject","map","index","components_TodoItem","key","AddTodoList","addUserInput","handleChange","_e$currentTarget","currentTarget","value","defineProperty","onBtnClickHandler","onAddListItem","Date","formValidate","trim","AddTodoList_templateObject","type","onChange","placeholder","AddTodoList_templateObject2","disabled","AddTodoList_templateObject3","todoListData","App","list","handleAddListItem","newListItem","concat","toConsumableArray","react_default","a","createElement","components_Wrapper","components_AddTodoList","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAGA,IAaeA,EAbC,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACjB,OACEC,OAAAC,EAAA,EAAAD,CAAA,OACEE,IAAKA,YAAFC,MAKFJ,q2CCPP,IAAMK,EAAeF,YAAHG,KAoGHC,6MAjFbC,MAAQ,CACNC,MAAM,EACNC,QAAQ,KAGVC,sBAAwB,SAAAC,GACtBA,EAAEC,iBAEFC,EAAKC,SAAS,CACZN,MAAOK,EAAKN,MAAMC,UAItBO,gBAAkB,WAEhB,QADiBF,EAAKN,MAAdC,8EAOD,IACCQ,EAASC,KAAKC,MAAdF,KAER,OACEhB,OAAAC,EAAA,EAAAD,CAAA,MACEE,IAAKA,YAAFiB,IAOmBF,KAAKF,kBAErB,eADA,SAONf,OAAAC,EAAA,EAAAD,CAAA,KACEE,IAAKA,YAAFkB,MAIFJ,EAAKK,OAERrB,OAAAC,EAAA,EAAAD,CAAA,OACEE,IAAKA,YAAFoB,MASHtB,OAAAC,EAAA,EAAAD,CAAA,UACEuB,GAAG,UACHrB,IAAKA,YAAFsB,IACCpB,GAEJqB,QAASR,KAAKP,uBALhB,QASAV,OAAAC,EAAA,EAAAD,CAAA,UACEE,IAAKA,YAAFwB,IACCtB,IAFN,mBApEauB,oJCCRC,mLAjBJ,IACCZ,EAASC,KAAKC,MAAdF,KACR,OACEhB,OAAAC,EAAA,EAAAD,CAAA,MACEE,IAAKA,YAAF2B,MAKFb,EAAKc,IAAI,SAACd,EAAMe,GAAP,OACR/B,OAAAC,EAAA,EAAAD,CAACgC,EAAD,CAAUC,IAAKF,EAAOf,KAAMA,cAXfW,8uCCgGRO,6MAhGb3B,MAAQ,CACN4B,aAAc,MAGhBC,aAAe,SAAAzB,GAAK,IAAA0B,EACI1B,EAAE2B,cAAhBf,EADUc,EACVd,GAAIgB,EADMF,EACNE,MACZ1B,EAAKC,SAALd,OAAAwC,EAAA,EAAAxC,CAAA,GACGuB,EAAKgB,OAIVE,kBAAoB,SAAA9B,GAClBA,EAAEC,iBADqB,IAEfuB,EAAiBtB,EAAKN,MAAtB4B,aAERtB,EAAKK,MAAMwB,cAAc,CACvBnB,IAAK,IAAIoB,KACTtB,MAAOc,OAIXS,aAAe,WAEb,QADyB/B,EAAKN,MAAtB4B,aACSU,gFAMV,IACCV,EAAiBlB,KAAKV,MAAtB4B,aAER,OACEnC,OAAAC,EAAA,EAAAD,CAAA,QACEE,IAAKA,YAAF4C,MAKH9C,OAAAC,EAAA,EAAAD,CAAA,SACEuB,GAAG,eACHwB,KAAK,OACLR,MAAOJ,EACPa,SAAU/B,KAAKmB,aACfa,YAAY,iHACZ/C,IAAKA,YAAFgD,OAeF,IACHlD,OAAAC,EAAA,EAAAD,CAAA,UACE+C,KAAK,SACLI,UAAWlC,KAAK2B,eAChBnB,QAASR,KAAKwB,kBACdvC,IAAKA,YAAFkD,IAYSnC,KAAK2B,eACX,UACA,cACO3B,KAAK2B,eAAiB,EAAI,KAnBzC,yDA4BY,KACF,YA3FQjB,aCCpB0B,EAAe,CACnB,CACEhC,MACE,+HAEJ,CACEA,MACE,0GAEJ,CACEA,MACE,mHA8BSiC,6MAzBb/C,MAAQ,CACNgD,KAAMF,KAGRG,kBAAoB,SAAAxC,GAKlB,IAAMyC,EAAW,CAAIzC,GAAJ0C,OAAA1D,OAAA2D,EAAA,EAAA3D,CAAaa,EAAKN,MAAMgD,OAGzC1C,EAAKC,SAAS,CAAEyC,KAAME,6EAItB,OACEG,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,CAAatB,cAAezB,KAAKuC,oBACjCI,EAAAC,EAAAC,cAACG,EAAD,CAAUjD,KAAMC,KAAKV,MAAMgD,eApBjB5B,aCREuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a69f86f.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nconst Wrapper = ({ children }) => {\n  return (\n    <div\n      css={css`\n        width: 600px;\n        margin: 0 auto;\n      `}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nconst buttonStyled = css`\n  border: none;\n  padding: 5px 15px;\n  display: inline-block;\n  border-radius: 4px;\n  background-color: #fff;\n  color: #282c34;\n  font-weight: bold;\n  cursor: pointer;\n  font-size: 12px;\n  &:hover,\n  &:focus {\n    background-color: #282c34;\n    color: #61dafb;\n    outline: none;\n  }\n`\n\nclass TodoItem extends Component {\n  state = {\n    done: false,\n    remove: false,\n  }\n\n  onBtnDoneClickHandler = e => {\n    e.preventDefault()\n\n    this.setState({\n      done: !this.state.done,\n    })\n  }\n\n  toggleDoneState = () => {\n    const { done } = this.state\n    if (done) {\n      return true\n    }\n    return false\n  }\n\n  render() {\n    const { data } = this.props\n\n    return (\n      <li\n        css={css`\n          padding: 20px 180px 20px 15px;\n          border-radius: 4px;\n          background-color: #61dafb;\n          color: #282c34;\n          word-break: break-word;\n          position: relative;\n          text-decoration: ${!this.toggleDoneState()\n            ? 'none'\n            : 'line-through'};\n          &:not(:first-of-type) {\n            margin-top: 20px;\n          }\n        `}\n      >\n        <p\n          css={css`\n            margin: 0;\n          `}\n        >\n          {data.title}\n        </p>\n        <div\n          css={css`\n            position: absolute;\n            display: flex;\n            flex-direction: row;\n            right: 15px;\n            top: 50%;\n            transform: translateY(-50%);\n          `}\n        >\n          <button\n            id=\"btnDone\"\n            css={css`\n              ${buttonStyled};\n            `}\n            onClick={this.onBtnDoneClickHandler}\n          >\n            Done\n          </button>\n          <button\n            css={css`\n              ${buttonStyled};\n              margin-left: 10px;\n            `}\n          >\n            Remove\n          </button>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport TodoItem from './TodoItem'\n\nclass TodoList extends Component {\n  render() {\n    const { data } = this.props\n    return (\n      <ul\n        css={css`\n          list-style: none;\n          padding: 0;\n        `}\n      >\n        {data.map((data, index) => (\n          <TodoItem key={index} data={data} />\n        ))}\n      </ul>\n    )\n  }\n}\n\nexport default TodoList\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nclass AddTodoList extends Component {\n  state = {\n    addUserInput: '',\n  }\n\n  handleChange = e => {\n    const { id, value } = e.currentTarget\n    this.setState({\n      [id]: value,\n    })\n  }\n\n  onBtnClickHandler = e => {\n    e.preventDefault()\n    const { addUserInput } = this.state\n\n    this.props.onAddListItem({\n      id: +new Date(),\n      title: addUserInput,\n    })\n  }\n\n  formValidate = () => {\n    const { addUserInput } = this.state\n    if (addUserInput.trim()) {\n      return true\n    }\n    return false\n  }\n\n  render() {\n    const { addUserInput } = this.state\n\n    return (\n      <form\n        css={css`\n          display: flex;\n          margin-top: 20px;\n        `}\n      >\n        <input\n          id=\"addUserInput\"\n          type=\"text\"\n          value={addUserInput}\n          onChange={this.handleChange}\n          placeholder=\"Введите новую задачу\"\n          css={css`\n            flex: 1;\n            border: none;\n            padding: 5px 15px;\n            border-radius: 4px;\n            height: 36px;\n            font-size: 16px;\n            color: #282c34;\n            font-weight: bold;\n            border: 3px solid #ffffff;\n            &:focus {\n              outline: none;\n              border-color: #61dafb;\n            }\n          `}\n        />{' '}\n        <button\n          type=\"button\"\n          disabled={!this.formValidate()}\n          onClick={this.onBtnClickHandler}\n          css={css`\n            flex-shrink: 0;\n            margin-left: 20px;\n            border: none;\n            padding: 5px 15px;\n            display: inline-block;\n            border-radius: 4px;\n            background-color: #fff;\n            color: #282c34;\n            font-size: 16px;\n            font-weight: bold;\n            cursor: pointer;\n            cursor: ${this.formValidate()\n              ? 'pointer'\n              : 'not-allowed'};\n            opacity: ${this.formValidate() ? 1 : 0.5};\n            &:hover,\n            &:focus {\n              background-color: #61dafb;\n              color: #282c34;\n              outline: none;\n            }\n          `}\n        >\n          Отправить{' '}\n        </button>{' '}\n      </form>\n    )\n  }\n}\n\nexport default AddTodoList\n","import React, { Component } from 'react'\nimport Wrapper from './components/Wrapper'\nimport TodoList from './components/TodoList'\nimport AddTodoList from './components/AddTodoList'\n\nconst todoListData = [\n  {\n    title:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n  },\n  {\n    title:\n      'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.',\n  },\n  {\n    title:\n      'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n  },\n]\n\nclass App extends Component {\n  state = {\n    list: todoListData, // в начальное состояние положили значение из переменной\n  }\n\n  handleAddListItem = data => {\n    // сначала мы формируем массив, на основе\n    // всего того, что уже было в новостях\n    // и кладем это все в новый массив +\n    // новую новость кладем в начало массива\n    const newListItem = [data, ...this.state.list]\n\n    // затем обновляем новый массив новостей в this.state.list\n    this.setState({ list: newListItem })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <AddTodoList onAddListItem={this.handleAddListItem} />\n        <TodoList data={this.state.list} />\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}