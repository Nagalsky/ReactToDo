{"version":3,"sources":["components/Wrapper.js","components/TodoItem.js","components/TodoList.js","components/AddTodoList.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","_ref","children","Object","core_browser_esm","css","_templateObject","buttonStyled","TodoItem_templateObject","TodoItem","state","isDone","onBtnDoneClickHandler","e","preventDefault","_this","setState","toggleDoneState","_this$props","this","props","data","onRemoveListItem","_templateObject2","_templateObject3","title","_templateObject4","_templateObject5","onClick","_templateObject6","id","Component","TodoList","TodoList_templateObject","map","dataItem","components_TodoItem","key","AddTodoList","addUserInput","handleChange","_e$currentTarget","currentTarget","value","defineProperty","onBtnClickHandler","onAddListItem","Date","formValidate","trim","AddTodoList_templateObject","type","onChange","placeholder","AddTodoList_templateObject2","disabled","AddTodoList_templateObject3","todoListData","App","list","handleAddListItem","newListItem","concat","toConsumableArray","handleRemoveListItem","newList","remove","listItem","react_default","a","createElement","components_Wrapper","components_AddTodoList","components_TodoList","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e227ce78.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nconst Wrapper = ({ children }) => {\n  return (\n    <div\n      css={css`\n        width: 600px;\n        margin: 0 auto;\n      `}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nconst buttonStyled = css`\n  border: none;\n  padding: 5px 15px;\n  display: inline-block;\n  border-radius: 4px;\n  background-color: #fff;\n  color: #282c34;\n  font-weight: bold;\n  cursor: pointer;\n  font-size: 12px;\n  &:hover,\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    background-color: #282c34;\n    color: #61dafb;\n    outline: none;\n  }\n`\n\nclass TodoItem extends Component {\n  state = {\n    isDone: false,\n  }\n\n  onBtnDoneClickHandler = e => {\n    e.preventDefault()\n\n    this.setState({\n      isDone: !this.state.isDone,\n    })\n  }\n\n  toggleDoneState = () => {\n    const { isDone } = this.state\n    if (isDone) {\n      return true\n    }\n    return false\n  }\n\n  render() {\n    const { data, onRemoveListItem } = this.props\n\n    return (\n      <li\n        css={css`\n          padding: 20px 180px 20px 15px;\n          border-radius: 4px;\n          background-color: #61dafb;\n          color: #282c34;\n          word-break: break-word;\n          position: relative;\n          text-decoration: ${!this.toggleDoneState()\n            ? 'none'\n            : 'line-through'};\n          &:not(:first-of-type) {\n            margin-top: 20px;\n          }\n        `}\n      >\n        <p\n          css={css`\n            margin: 0;\n          `}\n        >\n          {data.title}\n        </p>\n        <div\n          css={css`\n            position: absolute;\n            display: flex;\n            flex-direction: row;\n            right: 15px;\n            top: 50%;\n            transform: translateY(-50%);\n          `}\n        >\n          <button\n            css={css`\n              ${buttonStyled};\n            `}\n            onClick={this.onBtnDoneClickHandler}\n          >\n            Done\n          </button>\n          <button\n            css={css`\n              ${buttonStyled};\n              margin-left: 10px;\n            `}\n            onClick={() => {\n              onRemoveListItem(data.id)\n            }}\n          >\n            Remove\n          </button>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport TodoItem from './TodoItem'\n\nclass TodoList extends Component {\n  render() {\n    const { data, onRemoveListItem } = this.props\n    return (\n      <ul\n        css={css`\n          list-style: none;\n          padding: 0;\n        `}\n      >\n        {data.map(dataItem => (\n          <TodoItem\n            key={dataItem.id}\n            data={dataItem}\n            onRemoveListItem={onRemoveListItem}\n          />\n        ))}\n      </ul>\n    )\n  }\n}\n\nexport default TodoList\n","import React, { Component } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nclass AddTodoList extends Component {\n  state = {\n    addUserInput: '',\n  }\n\n  handleChange = e => {\n    const { id, value } = e.currentTarget\n    this.setState({\n      [id]: value,\n    })\n  }\n\n  onBtnClickHandler = e => {\n    e.preventDefault()\n    const { addUserInput } = this.state\n\n    this.props.onAddListItem({\n      id: +new Date(),\n      title: addUserInput,\n    })\n\n    this.setState({\n      addUserInput: '',\n    })\n  }\n\n  formValidate = () => {\n    const { addUserInput } = this.state\n    if (addUserInput.trim()) {\n      return true\n    }\n    return false\n  }\n\n  render() {\n    const { addUserInput } = this.state\n\n    return (\n      <form\n        css={css`\n          display: flex;\n          margin-top: 20px;\n        `}\n      >\n        <input\n          id=\"addUserInput\"\n          type=\"text\"\n          value={addUserInput}\n          onChange={this.handleChange}\n          placeholder=\"Введите новую задачу\"\n          css={css`\n            flex: 1;\n            border: none;\n            padding: 5px 15px;\n            border-radius: 4px;\n            height: 36px;\n            font-size: 16px;\n            color: #282c34;\n            font-weight: bold;\n            border: 3px solid #ffffff;\n            &:focus {\n              outline: none;\n              border-color: #61dafb;\n            }\n          `}\n        />{' '}\n        <button\n          type=\"button\"\n          disabled={!this.formValidate()}\n          onClick={this.onBtnClickHandler}\n          css={css`\n            flex-shrink: 0;\n            margin-left: 20px;\n            border: none;\n            padding: 5px 15px;\n            display: inline-block;\n            border-radius: 4px;\n            background-color: #fff;\n            color: #282c34;\n            font-size: 16px;\n            font-weight: bold;\n            cursor: pointer;\n            cursor: ${this.formValidate()\n              ? 'pointer'\n              : 'not-allowed'};\n            opacity: ${this.formValidate() ? 1 : 0.5};\n            &:hover,\n            &:focus {\n              background-color: #61dafb;\n              color: #282c34;\n              outline: none;\n            }\n          `}\n        >\n          Отправить{' '}\n        </button>{' '}\n      </form>\n    )\n  }\n}\n\nexport default AddTodoList\n","import React, { Component } from 'react'\nimport { remove } from 'lodash'\nimport Wrapper from './components/Wrapper'\nimport TodoList from './components/TodoList'\nimport AddTodoList from './components/AddTodoList'\n\nconst todoListData = [\n  {\n    id: 1,\n    title: 'gg',\n  },\n  {\n    id: 2,\n    title:\n      'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.',\n  },\n  {\n    id: 3,\n    title:\n      'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n  },\n]\n\nclass App extends Component {\n  state = {\n    list: todoListData, // в начальное состояние положили значение из переменной\n  }\n\n  handleAddListItem = data => {\n    // сначала мы формируем массив, на основе\n    // всего того, что уже было в новостях\n    // и кладем это все в новый массив +\n    // новую новость кладем в начало массива\n    const newListItem = [data, ...this.state.list]\n\n    // затем обновляем новый массив новостей в this.state.list\n    this.setState({ list: newListItem })\n  }\n\n  handleRemoveListItem = id => {\n    const { list } = this.state\n\n    const newList = remove(list, function(listItem) {\n      return listItem.id !== id\n    })\n\n    this.setState({ list: newList })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <AddTodoList onAddListItem={this.handleAddListItem} />\n        <TodoList\n          data={this.state.list}\n          onRemoveListItem={this.handleRemoveListItem}\n        />\n        {this.state.list.length ? (\n          <strong>Всего новостей: {this.state.list.length}</strong>\n        ) : null}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}